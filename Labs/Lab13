postgres=# CREATE TABLE employees (
postgres(#     emp_id SERIAL PRIMARY KEY,
postgres(#     first_name VARCHAR(50),
postgres(#     last_name VARCHAR(50),
postgres(#     department VARCHAR(100),
postgres(#     salary NUMERIC(10,2)
postgres(# );
CREATE TABLE
postgres=#
postgres=# INSERT INTO employees (first_name, last_name, department, salary)
postgres-# VALUES
postgres-# ('Alice', 'Brown', 'Sales', 50000),
postgres-# ('Bob', 'Smith', 'Sales', 60000),
postgres-# ('Charlie', 'Adams', 'HR', 45000),
postgres-# ('Diana', 'Clark', 'HR', 47000),
postgres-# ('Ethan', 'Davis', 'IT', 60000),
postgres-# ('Fiona', 'Evans', 'IT', 65000),
postgres-# ('George', 'Wilson', 'Finance', 70000),
postgres-# ('Hannah', 'Young', 'Finance', 72000);
INSERT 0 8
postgres=#
postgres=#
postgres=#
postgres=# SELECT first_name, last_name, salary
postgres-# FROM employees
postgres-# WHERE salary > (
postgres(#     SELECT AVG(salary)
postgres(#     FROM employees
postgres(# );
 first_name | last_name |  salary
------------+-----------+----------
 Bob        | Smith     | 60000.00
 Ethan      | Davis     | 60000.00
 Fiona      | Evans     | 65000.00
 George     | Wilson    | 70000.00
 Hannah     | Young     | 72000.00
(5 rows)


postgres=#
postgres=#
postgres=# CREATE TABLE orders (
postgres(#     order_id SERIAL PRIMARY KEY,
postgres(#     region_id INT NOT NULL,
postgres(#     order_date DATE,
postgres(#     amount NUMERIC(12,2) NOT NULL
postgres(# );
CREATE TABLE
postgres=#
postgres=# INSERT INTO orders (region_id, order_date, amount)
postgres-# VALUES
postgres-# (1, '2024-01-05', 250000.00),
postgres-# (1, '2024-01-12', 300000.00),
postgres-# (1, '2024-02-01', 500000.00),
postgres-# (2, '2024-01-07', 200000.00),
postgres-# (2, '2024-01-20', 150000.00),
postgres-# (2, '2024-02-05', 100000.00),
postgres-# (3, '2024-01-15', 800000.00),
postgres-# (3, '2024-02-10', 300000.00),
postgres-# (4, '2024-01-18', 120000.00),
postgres-# (4, '2024-02-12', 180000.00);
INSERT 0 10
postgres=#
postgres=# WITH regional_sales AS (
postgres(#     SELECT region_id, SUM(amount) AS total_sales
postgres(#     FROM orders
postgres(#     GROUP BY region_id
postgres(# )
postgres-# SELECT region_id, total_sales
postgres-# FROM regional_sales
postgres-# WHERE total_sales > 1000000;
 region_id | total_sales
-----------+-------------
         3 |  1100000.00
         1 |  1050000.00
(2 rows)


postgres=#
postgres=# ALTER TABLE employees
postgres-# ADD COLUMN manager_id INT REFERENCES employees(emp_id);
ALTER TABLE
postgres=#
postgres=#
postgres=# UPDATE employees
postgres-# SET manager_id = CASE emp_id
postgres-#     WHEN 1 THEN NULL
postgres-#     WHEN 2 THEN 1
postgres-#     WHEN 3 THEN 1
postgres-#     WHEN 4 THEN 2
postgres-#     WHEN 5 THEN 2
postgres-#     WHEN 6 THEN 3
postgres-#     WHEN 7 THEN 3
postgres-#     WHEN 8 THEN 4
postgres-# END;
UPDATE 8
postgres=#
postgres=#
postgres=# WITH RECURSIVE org_chart AS (
postgres(#     -- Anchor: Find the top-level manager (e.g., who has no manager)
postgres(#     SELECT emp_id, first_name, last_name, manager_id
postgres(#     FROM employees
postgres(#     WHERE manager_id IS NULL
postgres(#     UNION ALL
postgres(#     -- Recursive: Find everyone who reports to the people already in the chart
postgres(#     SELECT e.emp_id, e.first_name, e.last_name, e.manager_id
postgres(#     FROM employees e
postgres(#     INNER JOIN org_chart oc ON e.manager_id = oc.emp_id
postgres(# )
postgres-# SELECT * FROM org_chart;
 emp_id | first_name | last_name | manager_id
--------+------------+-----------+------------
      1 | Alice      | Brown     |
      2 | Bob        | Smith     |          1
      3 | Charlie    | Adams     |          1
      4 | Diana      | Clark     |          2
      5 | Ethan      | Davis     |          2
      6 | Fiona      | Evans     |          3
      7 | George     | Wilson    |          3
      8 | Hannah     | Young     |          4
(8 rows)


postgres=#
postgres=#
postgres=# CREATE TABLE warehouse_1 (
postgres(#     product_id SERIAL PRIMARY KEY,
postgres(#     product_name VARCHAR(100),
postgres(#     quantity INT
postgres(# );
CREATE TABLE
postgres=#
postgres=# CREATE TABLE warehouse_2 (
postgres(#     product_id SERIAL PRIMARY KEY,
postgres(#     product_name VARCHAR(100),
postgres(#     quantity INT
postgres(# );
CREATE TABLE
postgres=#
postgres=# INSERT INTO warehouse_1 (product_name, quantity)
postgres-# VALUES
postgres-# ('Laptop', 10),
postgres-# ('Mouse', 50),
postgres-# ('Keyboard', 30);
INSERT 0 3
postgres=#
postgres=# INSERT INTO warehouse_2 (product_name, quantity)
postgres-# VALUES
postgres-# ('Monitor', 20),
postgres-# ('Mouse', 25),
postgres-# ('Headset', 15);
INSERT 0 3
postgres=#
postgres=# SELECT product_name FROM warehouse_1
postgres-# UNION
postgres-# SELECT product_name FROM warehouse_2;
 product_name
--------------
 Mouse
 Laptop
 Headset
 Keyboard
 Monitor
(5 rows)


postgres=#
postgres=# SELECT product_id FROM warehouse_1 WHERE quantity = 10
postgres-# INTERSECT
postgres-# SELECT product_id FROM warehouse_2 WHERE quantity = 10;
 product_id
------------
(0 rows)


postgres=#
postgres=#
postgres=# SELECT
postgres-#     first_name,
postgres-#     last_name,
postgres-#     department,
postgres-#     salary,
postgres-#     RANK() OVER (PARTITION BY department ORDER BY salary DESC) AS dept_salary_rank
postgres-# FROM employees;
 first_name | last_name | department |  salary  | dept_salary_rank
------------+-----------+------------+----------+------------------
 Hannah     | Young     | Finance    | 72000.00 |                1
 George     | Wilson    | Finance    | 70000.00 |                2
 Diana      | Clark     | HR         | 47000.00 |                1
 Charlie    | Adams     | HR         | 45000.00 |                2
 Fiona      | Evans     | IT         | 65000.00 |                1
 Ethan      | Davis     | IT         | 60000.00 |                2
 Bob        | Smith     | Sales      | 60000.00 |                1
 Alice      | Brown     | Sales      | 50000.00 |                2
(8 rows)


postgres=#
postgres=#
postgres=# CREATE TABLE sales (
postgres(#     sale_id SERIAL PRIMARY KEY,
postgres(#     product_name VARCHAR(100),
postgres(#     year INT,
postgres(#     sales_amount DECIMAL(10,2)
postgres(# );
CREATE TABLE
postgres=#
postgres=# INSERT INTO sales (product_name, year, sales_amount)
postgres-# VALUES
postgres-# ('Laptop', 2022, 50000),
postgres-# ('Laptop', 2023, 60000),
postgres-# ('Laptop', 2024, 55000),
postgres-# ('Mouse', 2022, 10000),
postgres-# ('Mouse', 2023, 12000),
postgres-# ('Mouse', 2024, 9000),
postgres-# ('Monitor', 2022, 20000),
postgres-# ('Monitor', 2023, 25000),
postgres-# ('Monitor', 2024, 27000);
INSERT 0 9
postgres=#
postgres=#
postgres=# SELECT
postgres-#     product_name,
postgres-#     SUM(CASE WHEN year = 2022 THEN sales_amount ELSE 0 END) AS year_2022,
postgres-#     SUM(CASE WHEN year = 2023 THEN sales_amount ELSE 0 END) AS year_2023,
postgres-#     SUM(CASE WHEN year = 2024 THEN sales_amount ELSE 0 END) AS year_2024
postgres-# FROM sales
postgres-# GROUP BY product_name;
 product_name | year_2022 | year_2023 | year_2024
--------------+-----------+-----------+-----------
 Mouse        |  10000.00 |  12000.00 |   9000.00
 Monitor      |  20000.00 |  25000.00 |  27000.00
 Laptop       |  50000.00 |  60000.00 |  55000.00
(3 rows)


postgres=#
postgres=#
postgres=# CREATE TABLE pivoted_sales AS
postgres-# SELECT
postgres-#     product_name,
postgres-#     SUM(CASE WHEN year = 2022 THEN sales_amount ELSE 0 END) AS year_2022,
postgres-#     SUM(CASE WHEN year = 2023 THEN sales_amount ELSE 0 END) AS year_2023,
postgres-#     SUM(CASE WHEN year = 2024 THEN sales_amount ELSE 0 END) AS year_2024
postgres-# FROM sales
postgres-# GROUP BY product_name;
SELECT 3
postgres=#
postgres=# SELECT product_name, '2022' AS year, year_2022 AS sales_amount FROM pivoted_sales
postgres-# UNION ALL
postgres-# SELECT product_name, '2023' AS year, year_2023 AS sales_amount FROM pivoted_sales
postgres-# UNION ALL
postgres-# SELECT product_name, '2024' AS year, year_2024 AS sales_amount FROM pivoted_sales
postgres-# ORDER BY product_name, year;
 product_name | year | sales_amount
--------------+------+--------------
 Laptop       | 2022 |     50000.00
 Laptop       | 2023 |     60000.00
 Laptop       | 2024 |     55000.00
 Monitor      | 2022 |     20000.00
 Monitor      | 2023 |     25000.00
 Monitor      | 2024 |     27000.00
 Mouse        | 2022 |     10000.00
 Mouse        | 2023 |     12000.00
 Mouse        | 2024 |      9000.00
(9 rows)


postgres=#
postgres=# ALTER TABLE employees
postgres-# ADD COLUMN tenure INT;
ALTER TABLE
postgres=#
postgres=# UPDATE employees
postgres-# SET tenure = CASE emp_id
postgres-#     WHEN 1 THEN 10
postgres-#     WHEN 2 THEN 4
postgres-#     WHEN 3 THEN 6
postgres-#     WHEN 4 THEN 8
postgres-#     WHEN 5 THEN 3
postgres-#     WHEN 6 THEN 7
postgres-#     WHEN 7 THEN 2
postgres-#     WHEN 8 THEN 5
postgres-# END;
UPDATE 8
postgres=#
postgres=# SELECT
postgres-#     emp_id,
postgres-#     SUM(salary) OVER (PARTITION BY department) AS total_dept_salary,
postgres-#     AVG(salary) FILTER (WHERE tenure > 5) OVER () AS avg_salary_senior
postgres-# FROM employees;
 emp_id | total_dept_salary | avg_salary_senior
--------+-------------------+--------------------
      7 |         142000.00 | 51750.000000000000
      8 |         142000.00 | 51750.000000000000
      3 |          92000.00 | 51750.000000000000
      4 |          92000.00 | 51750.000000000000
      5 |         125000.00 | 51750.000000000000
      6 |         125000.00 | 51750.000000000000
      1 |         110000.00 | 51750.000000000000
      2 |         110000.00 | 51750.000000000000
(8 rows)


postgres=#
postgres=#
postgres=# ALTER TABLE orders
postgres-# ADD COLUMN product_name VARCHAR(100);
ALTER TABLE
postgres=#
postgres=# ALTER TABLE orders
postgres-# ADD COLUMN status VARCHAR(50);
ALTER TABLE
postgres=#
postgres=#
postgres=# UPDATE orders
postgres-# SET product_name = CASE order_id
postgres-#     WHEN 1 THEN 'Laptop'
postgres-#     WHEN 2 THEN 'Mouse'
postgres-#     WHEN 3 THEN 'Monitor'
postgres-#     WHEN 4 THEN 'Keyboard'
postgres-#     WHEN 5 THEN 'Headset'
postgres-# END,
postgres-# status = CASE order_id
postgres-#     WHEN 1 THEN 'High Priority'
postgres-#     WHEN 2 THEN 'Low Priority'
postgres-#     WHEN 3 THEN 'Medium Priority'
postgres-#     WHEN 4 THEN 'High Priority'
postgres-#     WHEN 5 THEN 'Medium Priority'
postgres-# END;
UPDATE 10
postgres=#
postgres=#
postgres=# SELECT product_name, status
postgres-# FROM orders
postgres-# ORDER BY
postgres-#     CASE status
postgres-#         WHEN 'High Priority' THEN 1
postgres-#         WHEN 'Medium Priority' THEN 2
postgres-#         WHEN 'Low Priority' THEN 3
postgres-#         ELSE 4
postgres-#     END;
 product_name |     status
--------------+-----------------
 Keyboard     | High Priority
 Laptop       | High Priority
 Monitor      | Medium Priority
 Headset      | Medium Priority
 Mouse        | Low Priority
              |
              |
              |
              |
              |
(10 rows)


postgres=#