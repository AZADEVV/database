postgres=# CREATE TABLE departments(
postgres(#         dept_id SERIAL PRIMARY KEY,
postgres(#         dept_name VARCHAR(100) NOT NULL,
postgres(#         location VARCHAR(100)
postgres(# );
CREATE TABLE
postgres=#
postgres=# CREATE TABLE employees(
postgres(#         emp_id SERIAL PRIMARY KEY,
postgres(#         first_name VARCHAR(100) NOT NULL,
postgres(#         last_name VARCHAR(100) NOT NULL,
postgres(#         dept_id INTEGER REFERENCES departments(dept_id)
postgres(# );
CREATE TABLE
postgres=#
postgres=# DROP TABLE employees;
DROP TABLE
postgres=#
postgres=# CREATE TABLE employees(
postgres(#         emp_id SERIAL PRIMARY KEY,
postgres(#         first_name VARCHAR(100) NOT NULL,
postgres(#         last_name VARCHAR(100) NOT NULL,
postgres(#         dept_id INTEGER,
postgres(#         FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
postgres(# );
CREATE TABLE
postgres=#
postgres=#
postgres=# DROP TABLE employees;
DROP TABLE
postgres=#
postgres=# CREATE TABLE employees(
postgres(#         emp_id SERIAL PRIMARY KEY,
postgres(#         first_name VARCHAR(100) NOT NULL,
postgres(#         last_name VARCHAR(100) NOT NULL,
postgres(#         dept_id INTEGER
postgres(# );
CREATE TABLE
postgres=#
postgres=# ALTER TABLE employees
postgres-# ADD CONSTRAINT fk_employee_department
postgres-# FOREIGN KEY (dept_id) REFERENCES departments(dept_id);
ALTER TABLE
postgres=#
postgres=# DROP TABLE employees;
DROP TABLE
postgres=#
postgres=# CREATE TABLE employees (
postgres(#         emp_id SERIAL PRIMARY KEY,
postgres(#         first_name VARCHAR (50) NOT NULL,
postgres(#         last_name VARCHAR(50) NOT NULL,
postgres(#         dept_id INTEGER,
postgres(#         CONSTRAINT fk_employee_department
postgres(#                 FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
postgres(# );
CREATE TABLE
postgres=#
postgres=# INSERT INTO departments (dept_name, location) VALUES
postgres-# ('Engineering', 'Building A'), ('Marketing', 'Building B'), ('HR', 'Building C');
INSERT 0 3
postgres=#
postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES
postgres-# ('John', 'Smith', 1) ;
INSERT 0 1
postgres=#
postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES
postgres-# (' Jane', 'Doe', 99);
ОШИБКА:  INSERT или UPDATE в таблице "employees" нарушает ограничение внешнего ключа "fk_employee_department"
DETAIL:  Ключ (dept_id)=(99) отсутствует в таблице "departments".
postgres=#
postgres=# DELETE FROM departments WHERE dept_id = 1;
ОШИБКА:  UPDATE или DELETE в таблице "departments" нарушает ограничение внешнего ключа "fk_employee_department" таблицы "employees"
DETAIL:  На ключ (dept_id)=(1) всё ещё есть ссылки в таблице "employees".
postgres=#
postgres=# DROP TABLE employees;
DROP TABLE
postgres=#
postgres=# CREATE TABLE employees (
postgres(#         emp_id SERIAL PRIMARY KEY,
postgres(#         first_name VARCHAR(50) NOT NULL,
postgres(#         last_name VARCHAR(50) NOT NULL,
postgres(#         dept_id INTEGER REFERENCES departments(dept_id) ON DELETE CASCADE
postgres(# );
CREATE TABLE
postgres=#
postgres=# DELETE FROM departments WHERE dept_id = 1;
DELETE 1
postgres=#
postgres=# DROP TABLE employees;
DROP TABLE
postgres=#
postgres=# CREATE TABLE employees (
postgres(# emp_id SERIAL PRIMARY KEY,
postgres(# first_name VARCHAR (50) NOT NULL,
postgres(# last_name VARCHAR(50) NOT NULL,
postgres(# dept_id INTEGER REFERENCES departments(dept_id) ON DELETE SET NULL
postgres(# );
CREATE TABLE
postgres=#
postgres=# DELETE FROM departments WHERE dept_id = 1;
DELETE 0
postgres=#
postgres=# DROP TABLE employees;
DROP TABLE
postgres=#
postgres=# CREATE TABLE employees (
postgres(#         emp_id SERIAL PRIMARY KEY,
postgres(#         first_name VARCHAR(50) NOT NULL,
postgres(#         last_name VARCHAR(50) NOT NULL,
postgres(#         dept_id INTEGER DEFAULT 0 REFERENCES departments(dept_id) ON DELETE SET DEFaULT
postgres(# );
CREATE TABLE
postgres=#
postgres=# DELETE FROM departments WHERE dept_id = 1;
DELETE 0
postgres=#
postgres=# DROP TABLE employees;
DROP TABLE
postgres=#
postgres=# CREATE TABLE employees (
postgres(#         emp_id SERIAL PRIMARY KEY,
postgres(#         first_name VARCHAR(50) NOT NULL,
postgres(#         last_name VARCHAR (50) NOT NULL,
postgres(#         dept_id INTEGER REFERENCES departments(dept_id) ON DELETE RESTRICT
postgres(# );
CREATE TABLE
postgres=#
postgres=# DELETE FROM departments WHERE dept_id = 1;
DELETE 0
postgres=#
postgres=# DROP TABLE employees;
DROP TABLE
postgres=#
postgres=# CREATE TABLE employees (
postgres(#         emp_id SERIAL PRIMARY KEY,
postgres(#         first_name VARCHAR(50) NOT NULL,
postgres(#         last_name VARCHAR(50) NOT NULL,
postgres(#         dept_id INTEGER DEFAULT 0 REFERENCES departments(dept_id) ON UPDATE CASCADE
postgres(# );
CREATE TABLE
postgres=#
postgres=#
postgres=# UPDATE departments SET dept_id=100 WHERE dept_id=1;
UPDATE 0
postgres=#
postgres=# DROP TABLE employees;
DROP TABLE
postgres=#
postgres=# CREATE TABLE employees (
postgres(#         emp_id SERIAL PRIMARY KEY,
postgres(#         first_name VARCHAR(50) NOT NULL,
postgres(#         last_name VARCHAR(50) NOT NULL,
postgres(#         dept_id INTEGER DEFAULT 0 REFERENCES departments(dept_id)
postgres(#                 ON DELETE RESTRICT
postgres(#                 ON UPDATE CASCADE
postgres(# );
CREATE TABLE
postgres=#
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# DROP TABLE departments;
DROP TABLE
postgres=#
postgres=# CREATE TABLE users (
postgres(#         user_id SERIAL PRIMARY KEY,
postgres(#         username VARCHAR(50) UNIQUE NOT NULL,
postgres(#         email VARCHAR (100) UNIQUE NOT NULL,
postgres(#         created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
postgres(# );
CREATE TABLE
postgres=#
postgres=# CREATE TABLE user_profiles (
postgres(#         profile_id SERIAL PRIMARY KEY,
postgres(#         user_id INTEGER UNIQUE NOT NULL,
postgres(#         first_name VARCHAR(50),
postgres(#         last_name VARCHAR(50),
postgres(#         bio TEXT,
postgres(#         profile_picture_url VARCHAR (255) ,
postgres(#         FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
postgres(# );
CREATE TABLE
postgres=#
postgres=# DROP TABLE user_profiles;
DROP TABLE
postgres=#
postgres=#  CREATE TABLE user_profiles (
postgres(#         user_id INTEGER PRIMARY KEY,
postgres(#         first_name VARCHAR(50) ,
postgres(#         last_name VARCHAR(50),
postgres(#         bio TEXT,
postgres(#         profile_picture_url VARCHAR(255) ,
postgres(#         FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
postgres(# );
CREATE TABLE
postgres=#
postgres=#
postgres=# INSERT INTO users (username, email) VALUES ('johndoe', 'john@example.com');
INSERT 0 1
postgres=# INSERT INTO user_profiles (user_id, first_name, last_name, bio) VALUES (1, 'John', 'Doe', 'Software developer passionate about databases');
INSERT 0 1
postgres=# INSERT INTO user_profiles (user_id, first_name, last_name) VALUES (1, 'Jane', 'Smith');
ОШИБКА:  повторяющееся значение ключа нарушает ограничение уникальности "user_profiles_pkey"
DETAIL:  Ключ "(user_id)=(1)" уже существует.
postgres=#
postgres=# DROP TABLE user_profiles;
DROP TABLE
postgres=#
postgres=# DROP TABLE users;
DROP TABLE
postgres=#
postgres=# CREATE TABLE departments (
postgres(#         dept_id SERIAL PRIMARY KEY,
postgres(#         dept_name VARCHAR (100) NOT NULL,
postgres(#         manager_name VARCHAR (100) ,
postgres(#         budget DECIMAL (10,2)
postgres(# );
CREATE TABLE
postgres=#
postgres=# CREATE TABLE employees (
postgres(# emp_id SERIAL PRIMARY KEY,
postgres(# first_name VARCHAR(50) NOT NULL,
postgres(# last_name VARCHAR(50) NOT NULL,
postgres(# position VARCHAR (100), salary DECIMAL (10,2) ,
postgres(# hire_date DATE DEFAULT CURRENT_DATE,
postgres(# dept_id INTEGER NOT NULL,
postgres(# FOREIGN KEY (dept_id) REFERENCES departments(dept_id) ON DELETE RESTRICT
postgres(# );
CREATE TABLE
postgres=#
postgres=# CREATE TABLE blog_posts (
postgres(# post_id SERIAL PRIMARY KEY,
postgres(# title VARCHAR(200) NOT NULL,
postgres(# content TEXT, author VARCHAR (100),
postgres(# published_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
postgres(# ) ;
CREATE TABLE
postgres=#
postgres=# CREATE TABLE comments (
postgres(# comment_id SERIAL PRIMARY KEY,
postgres(# post_id INTEGER NOT NULL,
postgres(# commenter_name VARCHAR (100) ,
postgres(# comment_text TEXT NOT NULL, comment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
postgres(# FOREIGN KEY (post_id) REFERENCES blog_posts(post_id) ON DELETE CASCADE
postgres(# );
CREATE TABLE
postgres=#
postgres=# INSERT INTO departments (dept_name, manager_name, budget) VALUES ('Engineering', 'Alice Johnson', 500000.00), ('Marketing', 'Bob Wilson', 200000.00) ;
INSERT 0 2
postgres=#
postgres=# INSERT INTO employees (first_name, last_name, position, salary, dept_id) VALUES ('John', 'Smith', 'Software Engineer', 75000.00, 1),
postgres-# ('Jane', 'Doe', 'Senior Developer', 85000.00, 1),
postgres-# ('Mike' , 'Brown', 'DevOps Engineer', 80000.00, 1),
postgres-# ('Sarah', 'Davis', 'Marketing Specialist', 55000.00, 2);
INSERT 0 4
postgres=#
postgres=# SELECT d.dept_name, e.first_name, e.last_name, e.position FROM departments d JOIN employees e ON d.dept_id = e.dept_id ORDER BY d.dept_name, e.last_name;
  dept_name  | first_name | last_name |       position
-------------+------------+-----------+----------------------
 Engineering | Mike       | Brown     | DevOps Engineer
 Engineering | Jane       | Doe       | Senior Developer
 Engineering | John       | Smith     | Software Engineer
 Marketing   | Sarah      | Davis     | Marketing Specialist
(4 rows)


postgres=# CREATE TABLE students (
postgres(# student_id SERIAL PRIMARY KEY,
postgres(# first_name VARCHAR(50) NOT NULL,
postgres(# last_name VARCHAR(50) NOT NULL,
postgres(# email VARCHAR (100) UNIQUE,
postgres(# enrollment_date DATE DEFAULT CURRENT_DATE
postgres(# );
CREATE TABLE
postgres=# CREATE TABLE courses (
postgres(# course_id SERIAL PRIMARY KEY,
postgres(# course_code VARCHAR(10) UNIQUE NOT NULL,
postgres(# course_name VARCHAR(100) NOT NULL,
postgres(# credits INTEGER NOT NULL,
postgres(# instructor VARCHAR(100)
postgres(# );
CREATE TABLE
postgres=# CREATE TABLE student_enrollments (
postgres(# enrollment_id SERIAL PRIMARY KEY,
postgres(# student_id INTEGER NOT NULL,
postgres(# course_id INTEGER NOT NULL,
postgres(# enrollment_date DATE DEFAULT CURRENT_DATE,
postgres(# grade CHAR(2),
postgres(# FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE,
postgres(# FOREIGN KEY (course_id) REFERENCES courses(course_id) ON DELETE CASCADE,
postgres(#
postgres(# UNIQUE (student_id, course_id)
postgres(# );
CREATE TABLE
postgres=#
postgres=# INSERT INTO students (first_name, last_name, email) VALUES ('Alice', 'Johnson', 'alice@university.edu'), ('Bob', 'Smith', 'bob@university.edu'), ('Carol', 'Wilson', 'carol@university.edu');
INSERT 0 3
postgres=# INSERT INTO courses (course_code, course_name, credits, instructor) VALUES
postgres-# ('CS101', 'Introduction to Programming', 3, 'Dr. Brown'),
postgres-# ('CS201', 'Data Structures', 4, 'Dr. Davis'),
postgres-# ('MATH101', 'Calculus I', 4, 'Dr. Wilson');
INSERT 0 3
postgres=# INSERT INTO student_enrollments (student_id, course_id, grade) VALUES
postgres-# (1,1,'A'),
postgres-# (1,2,'B+'),
postgres-# (2,1,'A-'),
postgres-# (2,3,'B'),
postgres-# (3,2,'A'),
postgres-# (3,3,'A-');
INSERT 0 6
postgres=# SELECT
postgres-# s.first_name || ' ' || s.last_name AS student_name,
postgres-# c.course_code,
postgres-# c.course_name,
postgres-# se.grade,
postgres-# se.enrollment_date
postgres-# FROM students s
postgres-# JOIN student_enrollments se ON s.student_id = se.student_id
postgres-# JOIN courses c ON se.course_id = c.course_id
postgres-# ORDER BY s. last_name, c.course_code;
 student_name  | course_code |         course_name         | grade | enrollment_date
---------------+-------------+-----------------------------+-------+-----------------
 Alice Johnson | CS101       | Introduction to Programming | A     | 2025-10-13
 Alice Johnson | CS201       | Data Structures             | B+    | 2025-10-13
 Bob Smith     | CS101       | Introduction to Programming | A-    | 2025-10-13
 Bob Smith     | MATH101     | Calculus I                  | B     | 2025-10-13
 Carol Wilson  | CS201       | Data Structures             | A     | 2025-10-13
 Carol Wilson  | MATH101     | Calculus I                  | A-    | 2025-10-13
(6 rows)


postgres=# SELECT s. first_name, s.last_name, se.grade
postgres-# FROM students s
postgres-# JOIN student_enrollments se ON s.student_id = se.student_id
postgres-# JOIN courses c ON se.course_id = c.course_id
postgres-# WHERE c.course_code = 'CS101';
 first_name | last_name | grade
------------+-----------+-------
 Alice      | Johnson   | A
 Bob        | Smith     | A-
(2 rows)


postgres=# SELECT c.course_code, c.course_name, c.credits, se.grade
postgres-# FROM courses c
postgres-# JOIN student_enrollments se ON c.course_id = se.course_id
postgres-# JOIN students s ON se.student_id = s.student_id
postgres-# WHERE s.email = 'alice@university.edu';
 course_code |         course_name         | credits | grade
-------------+-----------------------------+---------+-------
 CS101       | Introduction to Programming |       3 | A
 CS201       | Data Structures             |       4 | B+
(2 rows)


postgres=#